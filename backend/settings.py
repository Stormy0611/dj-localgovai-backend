"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import tempfile

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TMP_DIR = tempfile.gettempdir()

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', True)

FRONTEND_HOST = os.environ.get('FRONTEND_HOST', "localhost")
ALLOWED_HOSTS = ['*']
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = []                   # Ignored if CORS_ALLOW_ALL_ORIGINS is True
CORS_ALLOWED_ORIGIN_REGEXES = [             # Ignored if CORS_ALLOW_ALL_ORIGINS is True
    r"^https://\w+\.domain\.com$",
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Application definition
INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    "daphne",
    'django.contrib.staticfiles',
    'corsheaders',
    'authentication',
    'communication',
    'knowledge_base',
    'user_manager',
    'file_manager'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # Add the path to the root 'templates' directory
            os.path.join(BASE_DIR, 'authentication', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# AUTH_USER_MODEL = "authentication.User"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Token Generation
FERNET_KEY = os.environ.get('FERNET_KEY', None)
PASSWORD_RESET_TIMEOUT = 300 # seconds
JWT_TOKEN_TIMESTAMP = 86400 # seconds = 1 day

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AZURE COGNITIVE SERVICE
SPEECH_KEY=os.environ.get('SPEECH_KEY', None)
SERVICE_REGION=os.environ.get('SERVICE_REGION', "uksouth")

# AZURE COMMUNICATION SERVICE
COMMUNICATION_ENDPOINT_URL = os.environ.get('COMMUNICATION_ENDPOINT_URL', None)
COMMUNICATION_IDENTITY = os.environ.get('COMMUNICATION_IDENTITY', None)
COMMUNICATION_ACCESS_TOKEN = os.environ.get('COMMUNICATION_ACCESS_TOKEN', None)
CONNECTION_STRING = os.environ.get('CONNECTION_STRING', None)
CALLBACK_URI_HOST = os.environ.get("CALLBACK_URI_HOST", "https://localhost:8000/v1/comm/call")
AZURE_NUMBER = os.environ.get('AZURE_NUMBER', None)
NUMBERS_TO_DIAL = os.getenv("NUMBERS_TO_DIAL", None)

# AZURE BOT SERVICE
DIRECT_LINE=os.environ.get('DIRECT_LINE', None)
BOT_IDENTITY=os.environ.get('BOT_IDENTITY', None)
BOT_CHAT_THREAD_ID=os.environ.get('BOT_CHAT_THREAD_ID', "") if os.environ.get('BOT_CHAT_THREAD_ID', "") != "" else None

# AWS Configuration
AWS_REGION = os.environ.get('AWS_REGION', "eu-west-2")
# AWS Dynamodb Configuration
AWS_DYNAMODB_ACCESS_KEY_ID = os.environ.get('AWS_DYNAMODB_ACCESS_KEY_ID', None)
AWS_DYNAMODB_SECRET_ACCESS_KEY = os.environ.get('AWS_DYNAMODB_SECRET_ACCESS_KEY', None)
# AWS SES Configuration
AWS_SES_ACCESS_KEY_ID = os.getenv("AWS_SES_ACCESS_KEY_ID", None) 
AWS_SES_SECRET_ACCESS_KEY = os.getenv("AWS_SES_SECRET_ACCESS_KEY", None)
CHARSET = os.getenv("CHARSET", "UTF-8")
# USE_SES_V2 = True
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", None)
# AWS S3 Bucket Configuration
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME", None) 

# Make necessary dir
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_KNOWLEDGE_BASE = os.path.join(MEDIA_ROOT, 'knowledge_bases')
MEDIA_FILES = os.path.join(MEDIA_ROOT, "file_manager")
MEDIA_COMMUNICATION = os.path.join(BASE_DIR, 'communication', 'audio')

LOG_FILE_PATH = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_FILE_PATH):
    os.mkdir(LOG_FILE_PATH)
if not os.path.exists(STATIC_ROOT):
    os.mkdir(STATIC_ROOT)
if not os.path.exists(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)
if not os.path.exists(MEDIA_KNOWLEDGE_BASE):
    os.mkdir(MEDIA_KNOWLEDGE_BASE)
if not os.path.exists(MEDIA_FILES):
    os.mkdir(MEDIA_FILES)

# Twilio
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", None)
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", None)
TWILIO_API_KEY = os.getenv("TWILIO_API_KEY", None)
TWILIO_API_SECRET = os.getenv("TWILIO_API_SECRET", None)
TWILIO_NUMBER = os.getenv("TWILIO_NUMBER", None)
TWILIO_REGION = os.getenv("TWILIO_REGION", None)
TWILIO_SMS_URL = os.getenv("TWILIO_SMS_URL", None)
TWILIO_VOICE_URL = os.getenv("TWILIO_VOICE_URL", None)
